# -*- coding: utf-8 -*-
"""
Created on Thu Feb  2 08:20:17 2023

@author: Marin
"""

import random

neurone_init=[1, 1, 1] 
epsilon = 0.2

liste_entrees_objectifs = [([255,0,0],1), ([0,255,0],2), ([0,0,255],3),
([250,10,10],1), ([10,250,10],2), ([10,10,250],3),
([200,0,0],1), ([0,200,0],2), ([0,0,200],3),
([180,20,0],1), ([0,180,0],2), ([0,0,180],3),
([240,0,0],1), ([0,240,0],2), ([0,0,240],3),
([255,255,0],2), ([255,0,255],1), ([0,255,255],3) ]

liste_entrees_objectifs = [[[0.43723787465432074, 0.4058464071675908, 0.5792689058694727], 0], [[0.77946669538859, 0.1529992077255955, 0.48145383096445227], 0], [[0.2785715634886784, 0.46293272685623377, 0.4579842928325688], 1], [[0.8572635689202626, 0.022211862569802898, 0.8344948545167546], 0], [[0.5220733656583085, 0.8251354537819168, 0.18346093243738215], 1], [[0.8283027617429372, 0.016794005776974097, 0.16115877462856631], 0], [[0.6507640145614251, 0.5477909630252992, 0.5188054656627028], 0], [[0.9670326744859797, 0.3982195793561296, 0.9355327326608261], 0], [[0.5794333757824962, 0.6541845755810296, 0.9327174054361413], 0], [[0.25369099055383115, 0.3859960383361307, 0.291237553376096], 1], [[0.9077507788958129, 0.9181331536887681, 0.41394174703520326], 0], [[0.5293586023613077, 0.031777231612993284, 0.3570897593785699], 1], [[0.49570071602331744, 0.03567956449051879, 0.8387773232795775], 0], [[0.5244574480335241, 0.06985608141636734, 0.9658228927801812], 0], [[0.6135961595100449, 0.20519198808688754, 0.11903225191448286], 1], [[0.5661195046096037, 0.7981773654153858, 0.4456011526914825], 0], [[0.134519258616275, 0.18489813999764815, 0.19878746573510464], 0], [[0.33454026530497705, 0.82069011990264, 0.811011675519817], 0], [[0.3458536352256093, 0.9846491927441924, 0.7526199868817919], 0], [[0.890372690137912, 0.0738972147145075, 0.196568689476036], 1], [[0.5197577725564941, 0.9598727123451629, 0.18285914183233765], 1], [[0.08794039614045501, 0.6446540172297719, 0.9427537800679612], 0], [[0.602426462712162, 0.5369480146786632, 0.1422420856779154], 0], [[0.6717824273463111, 0.9906299040269705, 0.4918348684738414], 1], [[0.47657078328001856, 0.5330711831270868, 0.6884286041475083], 0], [[0.684672261879566, 0.47916344144317446, 0.4902412554296959], 0], [[0.8845661743192573, 0.5271169361539608, 0.09037524534214225], 0], [[0.8994263615224681, 0.9313757410800649, 0.7686664899099189], 1], [[0.48259127544864966, 0.5981256400332805, 0.5858543271063575], 1], [[0.5076237072310509, 0.043031601177773715, 0.8442955016037007], 0], [[0.8867262750181444, 0.36733395732128427, 0.48457044786829695], 1], [[0.8301196431134008, 0.7591343891915712, 0.3029660050514671], 1], [[0.6545491519728075, 0.3560181049165496, 0.2322442213037511], 1], [[0.7734910203136256, 0.47263414764617795, 0.6997467036298683], 1], [[0.7904362385459324, 0.7856959160406704, 0.3307145810252552], 1], [[0.9093708107122357, 0.8738895243638183, 0.4752486439885254], 1], [[0.6932409758340369, 0.5600359197439426, 0.21109196510729877], 1], [[0.4348133556624503, 0.13495758843875072, 0.3623957183986295], 1], [[0.41757821352848656, 0.3182214339530878, 0.7071252877657912], 0], [[0.07952591596785785, 0.8765754253372792, 0.7893510706495535], 0], [[0.9985619864753004, 0.31690243773736326, 0.22641999933252355], 1], [[0.6880969023086668, 0.2226668712405383, 0.8609793133340393], 0], [[0.16834011762257295, 0.37866692575792726, 0.8877232788881424], 0], [[0.5912437957089706, 0.9399333138651071, 0.05003482476811061], 0], [[0.9891438578001075, 0.3615665937375704, 0.9696012774239288], 1], [[0.56915459068308, 0.08114653788569337, 0.24111541596878538], 1], [[0.01113050023846851, 0.8739339193189212, 0.303759455652691], 0], [[0.820743235031644, 0.28403359231943504, 0.3836448282634306], 1], [[0.982220199849773, 0.5204853083466829, 0.41455423347591125], 1], [[0.6737278568499699, 0.14864905232598358, 0.06405147190636551], 1], [[0.39441341079105696, 0.5271504786018127, 0.8654170328689482], 0], [[0.9993883275466505, 0.867886362088219, 0.6984325553468909], 1], [[0.20168331840634612, 0.6709203025291478, 0.765978813693373], 0], [[0.9327439287344491, 0.30537146985809194, 0.3806276443261395], 1], [[0.7939097062297167, 0.4199746913054425, 0.6136809016815992], 1], [[0.006111526074835005, 0.3875287430745654, 0.810526750047779], 0], [[0.21300913107724495, 0.04766326622513917, 0.34662383663608654], 0], [[0.500410588806766, 0.058420300333686837, 0.08811732036160058], 1], [[0.7449519031255716, 0.8882459825831138, 0.1701427812846722], 0], [[0.9820199723381088, 0.11361948267178124, 0.4797635629792857], 1], [[0.9846895769104458, 0.08911833350034659, 0.6779067224634154], 1], [[0.477998917383722, 0.9433433001802418, 0.40301816882896946], 0], [[0.8419214034164105, 0.6107439423029822, 0.8509529403685188], 0], [[0.771179030826571, 0.8908447076167009, 0.7663196341726325], 0], [[0.011881346886897126, 0.3998726862360341, 0.16625109650256886], 0]]
    
    
#Créer une liste aléatoire de liste qui comporte 3 numéros compris entre 0 et 255 (indice rgb) et qui donne comme objectif
# 1 si le max de la liste correspond à la case que l'on voulait prendre en compte (0 pour rouge 1 pour vert et 2 pour bleu) ou 0 si non 
def liste (n,couleur):
    for i in range(n):
        entree = [random.random() for i in range(3)]
        maxi = entree.index(max(entree))
        if (maxi==couleur): objectif=1
        else: objectif=0
        liste_entrees_objectifs.append([entree, objectif])
    return liste_entrees_objectifs


def activation (neurone,entree):
    
    somme = 0
    s = 0
    for i in range (3):
        somme+=neurone[i]*entree[i]
    if somme>=1 : s=1
    else : s=0
    return s 

def apprentissage (neurone,entree,objectif,epsilon):
    neuronebis=[]
    s=activation(neurone, entree)
    if s==objectif:
        return neurone
        #for i in range (3):
        #    neuronebis.append(neurone[i])
    else:
        if s==0 and objectif==1:
            for i in range (3):
                neuronebis.append(neurone[i]+epsilon*entree[i])
        else:
            for i in range (3):
                neuronebis.append(neurone[i]-epsilon*entree[i])
        return neuronebis 

def epoque_apprentissage(neurone_init,liste_entrees_objectifs):
    for i in range (len(liste_entrees_objectifs)):
        neurone_init=apprentissage(neurone_init,liste_entrees_objectifs[i][0],liste_entrees_objectifs[i][1],epsilon)        
    return neurone_init


def epoque_apprentissage_v(neurone_init,liste_entrees_objectifs):
    for x in liste_entrees_objectifs:
        entree, objectif = x 
        neurone_init=apprentissage(neurone_init,entree,objectif,epsilon)        
    return neurone_init


def plusieur_epoque(neurone_init,liste_entrees_objectifs):
    for i in range(50):
        neurone_init=epoque_apprentissage(neurone_init, liste_entrees_objectifs)
    return neurone_init

"""
def quelle_couleur(neurones_init):
    if neurones_init[0]>neurones_init[1] and neurones_init[0]>neurones_init[2]:
        return "neurone qui reconnait le rouge"
    elif neurones_init[1]>neurones_init[0] and neurones_init[1]>neurones_init[2]:
        return "neurone qui reconnait le vert"
    else:
        return "neurone qui reconnait le bleu"
    """
print(plusieur_epoque(neurone_init, liste_entrees_objectifs))
#Regarde si la couleur que reconnait le neurone est bien celle que l'on avait indiqué au départ (0 pour rouge 1 pour vert et 2 pour bleu )
#print(quelle_couleur(plusieur_epoque(neurone_init, liste_entrees_objectifs)))
#print(liste(25,0))
